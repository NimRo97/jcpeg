import os

from jcpeg.config import Paths
from jcpeg.interfaces import Module, ToolWrapper
from jcpeg.utils import execute_cmd, isfile


SUPPORT_STRING = "ALGSUPPORT"


def install_jcalgtest_applet(force=False):
    if force:
        execute_cmd("java -jar bin/gp.jar -uninstall " + Paths.JCALGTEST_305)
    for applet in Paths.JCALGTEST_CAPS:
        cmd_line = "java -jar bin/gp.jar -install " + applet
        if execute_cmd(cmd_line) == 0:
            break


# Tool Wrappers --------------------------------------------------------------
class JCAlgTest(ToolWrapper):

    JCALGTEST_BIN = "java -jar " + Paths.JCALGTEST
    CAPS = Paths.JCALGTEST_CAPS

    def __init__(self, card_name, force_mode=False, install=True):
        super().__init__(card_name, force_mode)
        self.outfile = None
        if install:
            install_jcalgtest_applet()
    
    def get_outfile(self, search_string):
        if self.outfile:
            return self.outfile
        for file in os.listdir(self.get_outpath("")):
            if search_string in file:
                self.outfile = file
        return self.outfile
    
    def run(self, args, search_string):
        cmd_line = self.JCALGTEST_BIN + " " + " ".join(args)
        if self.get_outfile():
            print("Skipping " + cmd_line + " (results found).")
            return 0

        retcode = execute_cmd(cmd_line)

        for file in os.listdir("./"):
            if search_string in file and self.card_name in file:
                dest = self.get_outpath(file)
                os.replace(file, dest)
                self.outfile = file
                break

        return retcode


class JCAlgTestSupport(JCAlgTest):

    def get_outfile(self):
        return super().get_outfile(SUPPORT_STRING)
    
    def run(self):
        super().run([], SUPPORT_STRING) #TODO

    def parse(self):
        filename = self.get_outpath(self.outfile)
        with open(filename, "r") as f:
            lines = f.readlines()

        jcsupport = JCSupport()
        modules = [jcsupport]

        DISCARD = ["This file was generated by AlgTest utility",
                   "This is very specific feature"]

        TEST_INFO = ["Tested and provided by",
                     "Execution date",
                     "AlgTest",
                     "Used reader",
                     "Card ATR",
                     "Card name",
                     "Used protocol",
                     "JavaCard support version",
                     "Total test time"]
            
        i = 0
        while i < len(lines):
                
            line = lines[i].strip()
            i += 1

            if line == "" or ";" not in line \
               or any([d in line for d in DISCARD]):
                continue

            data = line.split(";", 2)

            if any([line.startswith(info) for info in TEST_INFO]):
                jcsupport.test_info[data[0]] = data[1].strip()
                continue
                
            if line.startswith("JCSystem"):
                jcsupport.jcsystem[data[0]] = data[1]
                continue

            if line.startswith("CPLC"):
                jcsupport.cplc[data[0]] = data[1]
                continue

            result = [None, None]
            if len(data) >= 3 and data[2] != "":
                result[1] = data[2]
            if data[1] == "yes":
                result[0] = True
            elif data[1] == "no":
                result[0] = False
            else:
                raise Exception("Invalid format in " + filename + ", line: " + stri(i - 1))

            jcsupport.support[data[0]] = result

        return modules


# Modules --------------------------------------------------------------------
class JCSupport(Module):
    def __init__(self, moduleid="jcsupport"):
        super().__init__(moduleid)
        self.test_info = {}
        self.jcsystem = {}
        self.cplc = {}
        self.support = {}
