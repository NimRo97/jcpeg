import os

from scrutiny.config import Paths
from scrutiny.interfaces import ToolWrapper
from scrutiny.utils import execute_cmd
from scrutiny.javacard.modules.algsupport import AlgSupport, SupportResult


SUPPORT_STRING = "ALGSUPPORT"


def install_jcalgtest_applet(force=False):
    """
    Installs JCAlgTest applet
    :param force: also remove already installed JCAlgTest applets
    """
    if force:
        execute_cmd("java -jar " + Paths.GPPRO + " -uninstall " +
                    Paths.JCALGTEST_305)
    for applet in Paths.JCALGTEST_CAPS:
        cmd_line = "java -jar " + Paths.GPPRO + " -install " + applet
        if execute_cmd(cmd_line) == 0:
            break


class JCAlgTest(ToolWrapper):
    """
    SCRUTINY JCAlgTest ToolWrapper
    """

    JCALGTEST_BIN = "java -jar " + Paths.JCALGTEST
    CAPS = Paths.JCALGTEST_CAPS

    def __init__(self, card_name, force_mode=False, install=True):
        super().__init__(card_name, force_mode)
        self.outfile = None
        if install:
            install_jcalgtest_applet()

    def find_outfile(self, search_string):
        """
        Find JCAlgTest output file
        :param search_string: JCAlgTest mode string
        """
        if self.outfile:
            return self.outfile
        for file in os.listdir(self.get_outpath("")):
            if search_string in file:
                self.outfile = file
        return self.outfile

    def get_outfile(self):
        """
        Get JCAlgTest output file name
        :return:
        """

    def run_jcalgtest(self, args, search_string):
        """
        Run JCAlgTest
        :param args: JCAlgTest arguments
        :param search_string: JCAlgTest mode string
        :return: return code
        """
        cmd_line = self.JCALGTEST_BIN + " " + " ".join(args)
        if self.get_outfile():
            print("Skipping " + cmd_line + " (results found).")
            return 0

        retcode = execute_cmd(cmd_line)

        for file in os.listdir("./"):
            if search_string in file and self.device_name in file:
                dest = self.get_outpath(file)
                os.replace(file, dest)
                self.outfile = file
                break

        return retcode


class JCAlgTestSupport(JCAlgTest):
    """
    JCAlgTest -support ToolWrapper
    """

    def get_outfile(self):
        return super().find_outfile(SUPPORT_STRING)

    def run(self):
        super().run_jcalgtest([], SUPPORT_STRING)

    def parse(self):
        filename = self.get_outpath(self.outfile)
        with open(filename, "r") as f:
            lines = f.readlines()

        jcsupport = AlgSupport()
        modules = [jcsupport]

        DISCARD = ["This file was generated by AlgTest utility",
                   "This is very specific feature",
                   "algorithm_name"]

        TEST_INFO = ["Tested and provided by",
                     "Execution date",
                     "AlgTest",
                     "Used reader",
                     "Card ATR",
                     "Card name",
                     "Card provider",
                     "Used protocol",
                     "High-power mode supported",
                     "Package_AID_test",
                     "JavaCard support version",
                     "Total test time"]

        i = 0
        while i < len(lines):

            line = lines[i].strip()
            i += 1

            if line == "" or ";" not in line \
               or any([d in line for d in DISCARD]):
                continue

            data = line.split(";")

            if any([line.startswith(info) for info in TEST_INFO]):
                jcsupport.test_info[data[0]] = data[1].strip()
                continue

            if line.startswith("JCSystem"):
                jcsupport.jcsystem[data[0]] = data[1]
                continue

            if line.startswith("APDU"):
                jcsupport.apdu[data[0]] = data[1]
                continue

            if line.startswith("CPLC"):
                jcsupport.cplc[data[0]] = data[1]
                continue

            result = SupportResult()

            if data[1].strip() == "yes":
                result.support = True
            elif data[1].strip() == "no":
                result.support = False
            else:
                raise Exception("Invalid format in",
                                filename + ", line: " + str(i - 1),
                                line)
            if len(data) >= 3 and data[2].strip() != "":
                if "sec" in data[2]:
                    data[2] = data[2].split(" ")[0]
                result.time_elapsed = float(data[2])
            if len(data) >= 6:
                result.persistent_memory = int(data[3])
                result.ram_deselect = int(data[4])
                result.ram_reset = int(data[5])

            jcsupport.support[data[0].strip()] = result
        unused = 0
        return modules
